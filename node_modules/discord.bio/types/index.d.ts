/// <reference types="node" />
import User from './structures/User';
import RawUser from './structures/RawUser';
import details from './endpoints/user/details';
import search from './endpoints/user/search';
import APIVersion from './endpoints/APIVersion';
import topUpvoted from './endpoints/topUpvoted';
import presence from './endpoints/user/presence';
import api from './util/api';
import UserConnections from './structures/UserConnections';
import { UserFlags, ImageURLOptions, Collection } from 'discord.js';
import { EventEmitter } from 'events';
import DBioAPIError from './structures/DBioAPIError';
import ConnectionTypes from './structures/ConnectionTypes';
import Base from './structures/Base';
/**The main hub for interacting with the discord.bio API. */
export declare class Bio extends EventEmitter {
    __outgoing_requests: number;
    __quota_reset: number;
    /**Number of request remaining before getting rate-limited */
    __quota: number;
    /**Maximum number of requests in a timeframe */
    __limit: number;
    /**The base URL used in making API requests */
    baseURL: string;
    /**Fetches the api version. */
    APIVersion: typeof APIVersion;
    /**Fetch the top upvoted users, sorted by upvotes.*/
    topUpvoted: typeof topUpvoted;
    /**API shortcut. There should be no need to call this method manually.*/
    readonly api: typeof api;
    bio: this;
    users: Base & {
        /**
         * Get user Details
         * @example bio.details('nickchan')
         */
        details: typeof details;
        /**Search for profiles on discord.bio,sorted by upvotes */
        search: typeof search;
        presence: typeof presence;
    };
    totalUsers: () => number;
    /**
     * @param baseURL - The API base URL
     */
    constructor(baseURL?: string);
}
export { User, RawUser, UserFlags, ImageURLOptions, DBioAPIError, ConnectionTypes, UserConnections, Collection };
